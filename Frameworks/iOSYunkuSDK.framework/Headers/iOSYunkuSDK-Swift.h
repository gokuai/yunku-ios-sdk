// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import YunkuSwiftSDK;
@import Foundation;
@import Dispatch;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@protocol HookDelegate;

SWIFT_CLASS("_TtC11iOSYunkuSDK15FileDataManager")
@interface FileDataManager : NSObject
- (void)registerHook:(id <HookDelegate> __nullable)delegate;
- (void)unRegisterHook;
@end


SWIFT_PROTOCOL("_TtP11iOSYunkuSDK16FileInfoDelegate_")
@protocol FileInfoDelegate
- (void)onGetFileUrl:(NSString * __nonnull)url;
- (void)onFail;
@end

@class NSCoder;

SWIFT_CLASS("_TtC11iOSYunkuSDK12FileListCell")
@interface FileListCell : UITableViewCell
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11iOSYunkuSDK17FileUploadManager")
@interface FileUploadManager : NSObject <UploadCallBack, UIAlertViewDelegate>
- (void)onFail:(NSString * __nonnull)errorMsg;
- (void)onProgress:(float)percent;
- (void)onSuccess:(NSString * __nonnull)fileHash fullPath:(NSString * __nonnull)fullPath;
@end

enum HookType : NSInteger;

SWIFT_PROTOCOL("_TtP11iOSYunkuSDK12HookDelegate_")
@protocol HookDelegate
- (BOOL)hookInvoke:(enum HookType)type fullPath:(NSString * __nonnull)fullPath;
@end

typedef SWIFT_ENUM(NSInteger, HookType) {
  HookTypeFileList = 0,
  HookTypeDownload = 1,
  HookTypeUpload = 2,
  HookTypeCreateDir = 3,
  HookTypeRename = 4,
  HookTypeDelete = 5,
};


SWIFT_CLASS("_TtC11iOSYunkuSDK9ImageData")
@interface ImageData : NSObject
@property (nonatomic, copy) NSString * __nonnull fileName;
@property (nonatomic, copy) NSString * __nonnull fullPath;
@property (nonatomic, copy) NSString * __nonnull thumbBig;
@property (nonatomic, copy) NSString * __nonnull fileHash;
@property (nonatomic, copy) NSString * __nonnull thumbNail;
@property (nonatomic) uint64_t fileSize;
@property (nonatomic, readonly, copy) NSString * __nonnull thumbBigCachePath;
@property (nonatomic, readonly, copy) NSString * __nonnull localPath;
@property (nonatomic, readonly) uint64_t localFileSize;
@property (nonatomic, readonly) uint64_t thumbBigCacheSize;
@property (nonatomic, readonly, copy) NSString * __nonnull thumbNailCachePath;
- (void)getFileUri:(void (^ __nonnull)(BOOL, NSString * __nonnull))resopnse;
@end


@interface NSBundle (SWIFT_EXTENSION(iOSYunkuSDK))
+ (NSString * __nonnull)getLocalStringFromBundle:(NSString * __nonnull)key comment:(NSString * __nonnull)comment;
@end


@interface NSData (SWIFT_EXTENSION(iOSYunkuSDK))
+ (NSData * __nullable)convertFromData:(NSData * __nonnull)data;
- (NSData * __null_unspecified)asData;
@end


@interface NSDictionary (SWIFT_EXTENSION(iOSYunkuSDK))
@end


@interface NSFileManager (SWIFT_EXTENSION(iOSYunkuSDK))
@end


@interface NSHTTPURLResponse (SWIFT_EXTENSION(iOSYunkuSDK))
@end


@interface NSMutableData (SWIFT_EXTENSION(iOSYunkuSDK))
@end


@interface NSURLResponse (SWIFT_EXTENSION(iOSYunkuSDK))
@end

@class UIImage;
@class UIView;
@class UIViewController;

SWIFT_CLASS("_TtC11iOSYunkuSDK16OBJCMethodBridge")
@interface OBJCMethodBridge : NSObject
+ (NSString * __nonnull)getLocalString:(NSString * __nonnull)key comment:(NSString * __nonnull)comment;
+ (UIImage * __nonnull)getLocalImage:(NSString * __nonnull)imageName;
+ (void)makeToast:(NSString * __nonnull)message view:(UIView * __nonnull)view;
+ (void)showProgress:(UIViewController * __nonnull)control;
+ (void)hideProgress:(UIViewController * __nonnull)control;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11iOSYunkuSDK6Option")
@interface Option : NSObject
@property (nonatomic) BOOL canUpload;
@property (nonatomic) BOOL canDel;
@property (nonatomic) BOOL canRename;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum SDKLogLevel : NSInteger;

SWIFT_CLASS("_TtC11iOSYunkuSDK9SDKConfig")
@interface SDKConfig : NSObject
+ (BOOL)logPrint;
+ (void)setLogPrint:(BOOL)newValue;
+ (enum SDKLogLevel)logLevel;
+ (void)setLogLevel:(enum SDKLogLevel)newValue;
+ (NSString * __nonnull)orgClientId;
+ (void)setOrgClientId:(NSString * __nonnull)value;
+ (NSString * __nonnull)orgClientSecret;
+ (void)setOrgClientSecret:(NSString * __nonnull)value;
+ (NSString * __nonnull)orgRootPath;
+ (void)setOrgRootPath:(NSString * __nonnull)value;
+ (NSString * __nonnull)orgRootTitle;
+ (void)setOrgRootTitle:(NSString * __nonnull)value;
+ (NSString * __nonnull)orgOptName;
+ (void)setOrgOptName:(NSString * __nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SDKLogLevel) {
  SDKLogLevelInfo = 0,
  SDKLogLevelWarning = 1,
  SDKLogLevelError = 2,
};


SWIFT_CLASS("_TtC11iOSYunkuSDK16SocketAckEmitter")
@interface SocketAckEmitter : NSObject
- (void)with:(NSArray * __nonnull)items;
@end

@class NSArray;

SWIFT_CLASS("_TtC11iOSYunkuSDK14SocketAnyEvent")
@interface SocketAnyEvent : NSObject
@property (nonatomic, readonly, copy) NSString * __nonnull event;
@property (nonatomic, readonly, strong) NSArray * __nullable items;
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end

@protocol SocketEngineClient;
@class NSHTTPCookie;
@class NSTimer;
@class NSURL;
enum SocketEnginePacketType : NSInteger;

SWIFT_PROTOCOL("_TtP11iOSYunkuSDK16SocketEngineSpec_")
@protocol SocketEngineSpec
@property (nonatomic, weak) id <SocketEngineClient> __nullable client;
@property (nonatomic, readonly) BOOL closed;
@property (nonatomic, readonly) BOOL connected;
@property (nonatomic, copy) NSDictionary<NSString *, id> * __nullable connectParams;
@property (nonatomic, readonly) BOOL doubleEncodeUTF8;
@property (nonatomic, readonly, copy) NSArray<NSHTTPCookie *> * __nullable cookies;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * __nullable extraHeaders;
@property (nonatomic, readonly) BOOL fastUpgrade;
@property (nonatomic, readonly) BOOL forcePolling;
@property (nonatomic, readonly) BOOL forceWebsockets;
@property (nonatomic, readonly, strong) dispatch_queue_t __null_unspecified parseQueue;
@property (nonatomic, readonly, strong) NSTimer * __nullable pingTimer;
@property (nonatomic, readonly) BOOL polling;
@property (nonatomic, readonly) BOOL probing;
@property (nonatomic, readonly, strong) dispatch_queue_t __null_unspecified emitQueue;
@property (nonatomic, readonly, strong) dispatch_queue_t __null_unspecified handleQueue;
@property (nonatomic, readonly, copy) NSString * __nonnull sid;
@property (nonatomic, readonly, copy) NSString * __nonnull socketPath;
@property (nonatomic, readonly, strong) NSURL * __nonnull urlPolling;
@property (nonatomic, readonly, strong) NSURL * __nonnull urlWebSocket;
@property (nonatomic, readonly) BOOL websocket;
- (nonnull instancetype)initWithClient:(id <SocketEngineClient> __nonnull)client url:(NSURL * __nonnull)url options:(NSDictionary * __nullable)options;
- (void)close:(NSString * __nonnull)reason;
- (void)connect;
- (void)didError:(NSString * __nonnull)error;
- (void)disconnect:(NSString * __nonnull)reason;
- (void)doFastUpgrade;
- (void)flushWaitingForPostToWebSocket;
- (void)open;
- (void)parseEngineData:(NSData * __nonnull)data;
- (void)parseEngineMessage:(NSString * __nonnull)message fromPolling:(BOOL)fromPolling;
- (void)write:(NSString * __nonnull)msg withType:(enum SocketEnginePacketType)type withData:(NSArray<NSData *> * __nonnull)data;
@end

@class NSURLSession;
@class WebSocket;
@class NSError;

SWIFT_CLASS("_TtC11iOSYunkuSDK12SocketEngine")
@interface SocketEngine : NSObject <SocketEngineSpec>
@property (nonatomic, readonly, strong) dispatch_queue_t __null_unspecified emitQueue;
@property (nonatomic, readonly, strong) dispatch_queue_t __null_unspecified handleQueue;
@property (nonatomic, readonly, strong) dispatch_queue_t __null_unspecified parseQueue;
@property (nonatomic, copy) NSDictionary<NSString *, id> * __nullable connectParams;
@property (nonatomic, copy) NSArray<NSString *> * __nonnull postWait;
@property (nonatomic) BOOL waitingForPoll;
@property (nonatomic) BOOL waitingForPost;
@property (nonatomic, readonly) BOOL closed;
@property (nonatomic, readonly) BOOL connected;
@property (nonatomic, readonly, copy) NSArray<NSHTTPCookie *> * __nullable cookies;
@property (nonatomic, readonly) BOOL doubleEncodeUTF8;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * __nullable extraHeaders;
@property (nonatomic, readonly) BOOL fastUpgrade;
@property (nonatomic, readonly) BOOL forcePolling;
@property (nonatomic, readonly) BOOL forceWebsockets;
@property (nonatomic, readonly) BOOL invalidated;
@property (nonatomic, readonly, strong) NSTimer * __nullable pingTimer;
@property (nonatomic, readonly) BOOL polling;
@property (nonatomic, readonly) BOOL probing;
@property (nonatomic, readonly, strong) NSURLSession * __nullable session;
@property (nonatomic, readonly, copy) NSString * __nonnull sid;
@property (nonatomic, readonly, copy) NSString * __nonnull socketPath;
@property (nonatomic, readonly, strong) NSURL * __nonnull urlPolling;
@property (nonatomic, readonly, strong) NSURL * __nonnull urlWebSocket;
@property (nonatomic, readonly) BOOL websocket;
@property (nonatomic, readonly, strong) WebSocket * __nullable ws;
@property (nonatomic, weak) id <SocketEngineClient> __nullable client;
- (nonnull instancetype)initWithClient:(id <SocketEngineClient> __nonnull)client url:(NSURL * __nonnull)url options:(NSDictionary * __nullable)options;
- (nonnull instancetype)initWithClient:(id <SocketEngineClient> __nonnull)client urlString:(NSString * __nonnull)urlString options:(NSDictionary * __nullable)options;
- (void)close:(NSString * __nonnull)reason;

/// Starts the connection to the server
- (void)connect;
- (void)didError:(NSString * __nonnull)error;
- (void)disconnect:(NSString * __nonnull)reason;
- (void)doFastUpgrade;
- (void)flushWaitingForPostToWebSocket;
- (void)open;
- (void)parseEngineData:(NSData * __nonnull)data;
- (void)parseEngineMessage:(NSString * __nonnull)message fromPolling:(BOOL)fromPolling;

/// Write a message, independent of transport.
- (void)write:(NSString * __nonnull)msg withType:(enum SocketEnginePacketType)type withData:(NSArray<NSData *> * __nonnull)data;
- (void)websocketDidConnect:(WebSocket * __nonnull)socket;
- (void)websocketDidDisconnect:(WebSocket * __nonnull)socket error:(NSError * __nullable)error;
@end


SWIFT_PROTOCOL("_TtP11iOSYunkuSDK18SocketEngineClient_")
@protocol SocketEngineClient
- (void)engineDidError:(NSString * __nonnull)reason;
- (void)engineDidClose:(NSString * __nonnull)reason;
@optional
- (void)engineDidOpen:(NSString * __nonnull)reason;
@required
- (void)parseEngineMessage:(NSString * __nonnull)msg;
- (void)parseEngineBinaryData:(NSData * __nonnull)data;
@end

typedef SWIFT_ENUM(NSInteger, SocketEnginePacketType) {
  SocketEnginePacketTypeOpen = 0,
  SocketEnginePacketTypeClose = 1,
  SocketEnginePacketTypePing = 2,
  SocketEnginePacketTypePong = 3,
  SocketEnginePacketTypeMessage = 4,
  SocketEnginePacketTypeUpgrade = 5,
  SocketEnginePacketTypeNoop = 6,
};


enum SocketIOClientStatus : NSInteger;
@class NSUUID;

SWIFT_CLASS("_TtC11iOSYunkuSDK14SocketIOClient")
@interface SocketIOClient : NSObject <SocketEngineClient>
@property (nonatomic, readonly, strong) NSURL * __nonnull socketURL;
@property (nonatomic, readonly, strong) id <SocketEngineSpec> __nullable engine;
@property (nonatomic, readonly) enum SocketIOClientStatus status;
@property (nonatomic) BOOL forceNew;
@property (nonatomic, copy) NSString * __nonnull nsp;
@property (nonatomic) BOOL reconnects;
@property (nonatomic) NSInteger reconnectWait;
@property (nonatomic, readonly, copy) NSString * __nullable sid;

/// Not so type safe way to create a SocketIOClient, meant for Objective-C compatiblity. If using Swift it's recommended to use init(socketURL: NSURL, options: Set<SocketIOClientOption>)
- (nonnull instancetype)initWithSocketURL:(NSURL * __nonnull)socketURL options:(NSDictionary * __nullable)options;
- (nonnull instancetype)initWithSocketURLString:(NSString * __nonnull)socketURLString options:(NSDictionary * __nullable)options;
- (void)close;

/// Connect to the server.
- (void)connect;

/// Connect to the server. If we aren't connected after timeoutAfter, call handler
- (void)connectWithTimeoutAfter:(NSInteger)timeoutAfter withTimeoutHandler:(void (^ __nullable)(void))handler;

/// Disconnects the socket. Only reconnect the same socket if you know what you're doing. Will turn off automatic reconnects.
- (void)disconnect;

/// Same as emit, but meant for Objective-C
- (void)emit:(NSString * __nonnull)event withItems:(NSArray * __nonnull)items;

/// Same as emitWithAck, but for Objective-C
- (void (^ __nonnull)(uint64_t, void (^ __nonnull)(NSArray * __nonnull)))emitWithAck:(NSString * __nonnull)event withItems:(NSArray * __nonnull)items;
- (void)engineDidClose:(NSString * __nonnull)reason;

/// error
- (void)engineDidError:(NSString * __nonnull)reason;

/// Causes an event to be handled. Only use if you know what you're doing.
- (void)handleEvent:(NSString * __nonnull)event data:(NSArray * __nonnull)data isInternalMessage:(BOOL)isInternalMessage withAck:(NSInteger)ack;

/// Leaves nsp and goes back to /
- (void)leaveNamespace;

/// Joins namespace
- (void)joinNamespace:(NSString * __nonnull)namespace_;

/// Removes handler(s)
- (void)off:(NSString * __nonnull)event;

/// Removes a handler with the specified UUID gotten from an on or once
- (void)offWithId:(NSUUID * __nonnull)id;

/// Adds a handler for an event. Returns: A unique id for the handler
- (NSUUID * __nonnull)on:(NSString * __nonnull)event callback:(void (^ __nonnull)(NSArray * __nonnull, SocketAckEmitter * __nonnull))callback;

/// Adds a single-use handler for an event. Returns: A unique id for the handler
- (NSUUID * __nonnull)once:(NSString * __nonnull)event callback:(void (^ __nonnull)(NSArray * __nonnull, SocketAckEmitter * __nonnull))callback;

/// Adds a handler that will be called on every event.
- (void)onAny:(void (^ __nonnull)(SocketAnyEvent * __nonnull))handler;
- (void)open;
- (void)parseEngineMessage:(NSString * __nonnull)msg;
- (void)parseEngineBinaryData:(NSData * __nonnull)data;

/// Tries to reconnect to the server.
- (void)reconnect;

/// Removes all handlers. Can be used after disconnecting to break any potential remaining retain cycles.
- (void)removeAllHandlers;
@end


@interface SocketIOClient (SWIFT_EXTENSION(iOSYunkuSDK))
@end

typedef SWIFT_ENUM(NSInteger, SocketIOClientStatus) {
  SocketIOClientStatusNotConnected = 0,
  SocketIOClientStatusClosed = 1,
  SocketIOClientStatusConnecting = 2,
  SocketIOClientStatusConnected = 3,
  SocketIOClientStatusReconnecting = 4,
};


@interface UIButton (SWIFT_EXTENSION(iOSYunkuSDK))
- (void)hnk_cancelSetImage;
- (void)hnk_setImage:(UIImage * __nonnull)image state:(UIControlState)state animated:(BOOL)animated success:(void (^ __nullable)(UIImage * __nonnull))succeed;
- (BOOL)hnk_shouldCancelImageForKey:(NSString * __nonnull)key;
- (void)hnk_cancelSetBackgroundImage;
- (void)hnk_setBackgroundImage:(UIImage * __nonnull)image state:(UIControlState)state animated:(BOOL)animated success:(void (^ __nullable)(UIImage * __nonnull))succeed;
- (BOOL)hnk_shouldCancelBackgroundImageForKey:(NSString * __nonnull)key;
@end


@interface UIImage (SWIFT_EXTENSION(iOSYunkuSDK))
@end


@interface UIImage (SWIFT_EXTENSION(iOSYunkuSDK))
@end


@interface UIImage (SWIFT_EXTENSION(iOSYunkuSDK))
+ (UIImage * __nullable)convertFromData:(NSData * __nonnull)data;
- (NSData * __null_unspecified)asData;
@end


@interface UIImageView (SWIFT_EXTENSION(iOSYunkuSDK))
- (void)hnk_cancelSetImage;
- (void)hnk_setImage:(UIImage * __nonnull)image animated:(BOOL)animated success:(void (^ __nullable)(UIImage * __nonnull))succeed;
- (BOOL)hnk_shouldCancelForKey:(NSString * __nonnull)key;
@end


@interface UIView (SWIFT_EXTENSION(iOSYunkuSDK))
@end


@interface UIViewController (SWIFT_EXTENSION(iOSYunkuSDK))
@end

@class NSStream;

SWIFT_CLASS("_TtC11iOSYunkuSDK9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
+ (NSString * __nonnull)ErrorDomain;
@property (nonatomic, strong) dispatch_queue_t __null_unspecified queue;
@property (nonatomic, copy) void (^ __nullable onConnect)(void);
@property (nonatomic, copy) void (^ __nullable onDisconnect)(NSError * __nullable);
@property (nonatomic, copy) void (^ __nullable onText)(NSString * __nonnull);
@property (nonatomic, copy) void (^ __nullable onData)(NSData * __nonnull);
@property (nonatomic, copy) void (^ __nullable onPong)(void);
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * __nonnull headers;
@property (nonatomic) BOOL voipEnabled;
@property (nonatomic) BOOL selfSignedSSL;
@property (nonatomic, copy) NSString * __nullable origin;
@property (nonatomic, readonly) BOOL isConnected;
@property (nonatomic, readonly, strong) NSURL * __nonnull currentURL;
- (nonnull instancetype)initWithUrl:(NSURL * __nonnull)url protocols:(NSArray<NSString *> * __nullable)protocols OBJC_DESIGNATED_INITIALIZER;

/// Connect to the websocket server on a background thread
- (void)connect;

/// write a string to the websocket. This sends it as a text frame.
- (void)writeString:(NSString * __nonnull)str;

/// write binary data to the websocket. This sends it as a binary frame.
- (void)writeData:(NSData * __nonnull)data;
- (void)writePing:(NSData * __nonnull)data;
- (void)stream:(NSStream * __nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
@end

@class UITableView;
@class NSIndexPath;
@class UIActionSheet;
@class UIImagePickerController;
@class UIAlertView;

SWIFT_CLASS("_TtC11iOSYunkuSDK20YKMainViewController")
@interface YKMainViewController : UIViewController <UITableViewDelegate, UIScrollViewDelegate, UITableViewDataSource, UIActionSheetDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate, UIAlertViewDelegate>
@property (nonatomic, strong) Option * __null_unspecified option;
@property (nonatomic, strong) id <HookDelegate> __null_unspecified delegate;
- (void)viewDidLoad;
- (NSInteger)tableView:(UITableView * __nonnull)tableView numberOfRowsInSection:(NSInteger)section;
- (UITableViewCell * __nonnull)tableView:(UITableView * __nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (CGFloat)tableView:(UITableView * __nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (void)tableView:(UITableView * __nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * __nonnull)indexPath;
- (void)didReceiveMemoryWarning;
- (void)actionSheet:(UIActionSheet * __nonnull)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex;
- (void)imagePickerController:(UIImagePickerController * __nonnull)picker didFinishPickingImage:(UIImage * __nonnull)image editingInfo:(NSDictionary<NSString *, id> * __nullable)editingInfo;
- (void)imagePickerControllerDidCancel:(UIImagePickerController * __nonnull)picker;
- (void)alertView:(UIAlertView * __nonnull)alertView clickedButtonAtIndex:(NSInteger)buttonIndex;
- (void)presentViewController:(UIViewController * __nonnull)viewControllerToPresent animated:(BOOL)flag completion:(void (^ __nullable)(void))completion;
- (nonnull instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
